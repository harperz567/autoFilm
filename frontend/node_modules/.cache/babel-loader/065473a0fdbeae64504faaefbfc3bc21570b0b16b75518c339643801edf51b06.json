{"ast":null,"code":"var _jsxFileName = \"/Users/harper/Desktop/scriptboard-project/frontend/src/contexts/AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(undefined);\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // UI State\n  const [uiState, setUiState] = useState({\n    isLoading: false,\n    error: undefined,\n    success: undefined\n  });\n\n  // Current project\n  const [currentProject, setCurrentProject] = useState(null);\n\n  // Projects list\n  const [projects, setProjects] = useState([]);\n\n  // Cache settings\n  const [cacheEnabled, setCacheEnabled] = useState(true);\n\n  // Theme\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme || 'light';\n  });\n\n  // File upload progress\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  // UI State helpers\n  const setLoading = loading => {\n    setUiState(prev => ({\n      ...prev,\n      isLoading: loading\n    }));\n  };\n  const setError = error => {\n    setUiState(prev => ({\n      ...prev,\n      error,\n      success: undefined\n    }));\n  };\n  const setSuccess = message => {\n    setUiState(prev => ({\n      ...prev,\n      success: message || undefined,\n      error: undefined\n    }));\n  };\n  const clearMessages = () => {\n    setUiState(prev => ({\n      ...prev,\n      error: undefined,\n      success: undefined\n    }));\n  };\n\n  // Project management helpers\n  const updateProject = updatedProject => {\n    setProjects(prev => prev.map(project => project.id === updatedProject.id ? updatedProject : project));\n    if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject.id) === updatedProject.id) {\n      setCurrentProject(updatedProject);\n    }\n  };\n  const removeProject = projectId => {\n    setProjects(prev => prev.filter(project => project.id !== projectId));\n    if ((currentProject === null || currentProject === void 0 ? void 0 : currentProject.id) === projectId) {\n      setCurrentProject(null);\n    }\n  };\n\n  // Cache management (placeholder for future Redis implementation)\n  const clearCache = () => {\n    if (typeof window !== 'undefined') {\n      // Clear localStorage cache\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n    }\n  };\n\n  // Theme management\n  const handleSetTheme = newTheme => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n\n    // Update document class for Tailwind dark mode\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  // Initialize theme on mount\n  React.useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n  const value = {\n    // UI State\n    uiState,\n    setLoading,\n    setError,\n    setSuccess,\n    clearMessages,\n    // Current project\n    currentProject,\n    setCurrentProject,\n    // Projects\n    projects,\n    setProjects,\n    updateProject,\n    removeProject,\n    // Cache\n    cacheEnabled,\n    setCacheEnabled,\n    clearCache,\n    // Theme\n    theme,\n    setTheme: handleSetTheme,\n    // File upload\n    uploadProgress,\n    setUploadProgress\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"rZJc1m9dUjzih45mOyu2aqeJTjw=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AppContext","undefined","AppProvider","children","_s","uiState","setUiState","isLoading","error","success","currentProject","setCurrentProject","projects","setProjects","cacheEnabled","setCacheEnabled","theme","setTheme","savedTheme","localStorage","getItem","uploadProgress","setUploadProgress","setLoading","loading","prev","setError","setSuccess","message","clearMessages","updateProject","updatedProject","map","project","id","removeProject","projectId","filter","clearCache","window","keys","Object","forEach","key","startsWith","removeItem","handleSetTheme","newTheme","setItem","document","documentElement","classList","add","remove","useEffect","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["/Users/harper/Desktop/scriptboard-project/frontend/src/contexts/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Project, UIState, AppError } from '../types';\n\ninterface AppContextType {\n  // UI State\n  uiState: UIState;\n  setLoading: (loading: boolean) => void;\n  setError: (error: AppError | null) => void;\n  setSuccess: (message: string | null) => void;\n  clearMessages: () => void;\n  \n  // Current project\n  currentProject: Project | null;\n  setCurrentProject: (project: Project | null) => void;\n  \n  // Projects list\n  projects: Project[];\n  setProjects: (projects: Project[]) => void;\n  updateProject: (project: Project) => void;\n  removeProject: (projectId: string) => void;\n  \n  // Cache functionality (placeholder for future Redis implementation)\n  cacheEnabled: boolean;\n  setCacheEnabled: (enabled: boolean) => void;\n  clearCache: () => void;\n  \n  // Theme and preferences\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n  \n  // File upload state\n  uploadProgress: number;\n  setUploadProgress: (progress: number) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n  children: ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n  // UI State\n  const [uiState, setUiState] = useState<UIState>({\n    isLoading: false,\n    error: undefined,\n    success: undefined,\n  });\n\n  // Current project\n  const [currentProject, setCurrentProject] = useState<Project | null>(null);\n\n  // Projects list\n  const [projects, setProjects] = useState<Project[]>([]);\n\n  // Cache settings\n  const [cacheEnabled, setCacheEnabled] = useState<boolean>(true);\n\n  // Theme\n  const [theme, setTheme] = useState<'light' | 'dark'>(() => {\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark';\n    return savedTheme || 'light';\n  });\n\n  // File upload progress\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n\n  // UI State helpers\n  const setLoading = (loading: boolean) => {\n    setUiState(prev => ({ ...prev, isLoading: loading }));\n  };\n\n  const setError = (error: AppError | null) => {\n    setUiState(prev => ({ ...prev, error, success: undefined }));\n  };\n\n  const setSuccess = (message: string | null) => {\n    setUiState(prev => ({ \n      ...prev, \n      success: message || undefined, \n      error: undefined \n    }));\n  };\n\n  const clearMessages = () => {\n    setUiState(prev => ({ ...prev, error: undefined, success: undefined }));\n  };\n\n  // Project management helpers\n  const updateProject = (updatedProject: Project) => {\n    setProjects(prev => \n      prev.map(project => \n        project.id === updatedProject.id ? updatedProject : project\n      )\n    );\n    \n    if (currentProject?.id === updatedProject.id) {\n      setCurrentProject(updatedProject);\n    }\n  };\n\n  const removeProject = (projectId: string) => {\n    setProjects(prev => prev.filter(project => project.id !== projectId));\n    \n    if (currentProject?.id === projectId) {\n      setCurrentProject(null);\n    }\n  };\n\n  // Cache management (placeholder for future Redis implementation)\n  const clearCache = () => {\n    if (typeof window !== 'undefined') {\n      // Clear localStorage cache\n      const keys = Object.keys(localStorage);\n      keys.forEach(key => {\n        if (key.startsWith('cache_')) {\n          localStorage.removeItem(key);\n        }\n      });\n    }\n  };\n\n  // Theme management\n  const handleSetTheme = (newTheme: 'light' | 'dark') => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    \n    // Update document class for Tailwind dark mode\n    if (newTheme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  // Initialize theme on mount\n  React.useEffect(() => {\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  const value: AppContextType = {\n    // UI State\n    uiState,\n    setLoading,\n    setError,\n    setSuccess,\n    clearMessages,\n    \n    // Current project\n    currentProject,\n    setCurrentProject,\n    \n    // Projects\n    projects,\n    setProjects,\n    updateProject,\n    removeProject,\n    \n    // Cache\n    cacheEnabled,\n    setCacheEnabled,\n    clearCache,\n    \n    // Theme\n    theme,\n    setTheme: handleSetTheme,\n    \n    // File upload\n    uploadProgress,\n    setUploadProgress,\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAmC9E,MAAMC,UAAU,gBAAGL,aAAa,CAA6BM,SAAS,CAAC;AAMvE,OAAO,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAU;IAC9CU,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAEP,SAAS;IAChBQ,OAAO,EAAER;EACX,CAAC,CAAC;;EAEF;EACA,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAiB,IAAI,CAAC;;EAE1E;EACA,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAY,EAAE,CAAC;;EAEvD;EACA,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAU,IAAI,CAAC;;EAE/D;EACA,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAmB,MAAM;IACzD,MAAMqB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAqB;IACpE,OAAOF,UAAU,IAAI,OAAO;EAC9B,CAAC,CAAC;;EAEF;EACA,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAS,CAAC,CAAC;;EAE/D;EACA,MAAM0B,UAAU,GAAIC,OAAgB,IAAK;IACvClB,UAAU,CAACmB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAElB,SAAS,EAAEiB;IAAQ,CAAC,CAAC,CAAC;EACvD,CAAC;EAED,MAAME,QAAQ,GAAIlB,KAAsB,IAAK;IAC3CF,UAAU,CAACmB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEjB,KAAK;MAAEC,OAAO,EAAER;IAAU,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED,MAAM0B,UAAU,GAAIC,OAAsB,IAAK;IAC7CtB,UAAU,CAACmB,IAAI,KAAK;MAClB,GAAGA,IAAI;MACPhB,OAAO,EAAEmB,OAAO,IAAI3B,SAAS;MAC7BO,KAAK,EAAEP;IACT,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM4B,aAAa,GAAGA,CAAA,KAAM;IAC1BvB,UAAU,CAACmB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEjB,KAAK,EAAEP,SAAS;MAAEQ,OAAO,EAAER;IAAU,CAAC,CAAC,CAAC;EACzE,CAAC;;EAED;EACA,MAAM6B,aAAa,GAAIC,cAAuB,IAAK;IACjDlB,WAAW,CAACY,IAAI,IACdA,IAAI,CAACO,GAAG,CAACC,OAAO,IACdA,OAAO,CAACC,EAAE,KAAKH,cAAc,CAACG,EAAE,GAAGH,cAAc,GAAGE,OACtD,CACF,CAAC;IAED,IAAI,CAAAvB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwB,EAAE,MAAKH,cAAc,CAACG,EAAE,EAAE;MAC5CvB,iBAAiB,CAACoB,cAAc,CAAC;IACnC;EACF,CAAC;EAED,MAAMI,aAAa,GAAIC,SAAiB,IAAK;IAC3CvB,WAAW,CAACY,IAAI,IAAIA,IAAI,CAACY,MAAM,CAACJ,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKE,SAAS,CAAC,CAAC;IAErE,IAAI,CAAA1B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEwB,EAAE,MAAKE,SAAS,EAAE;MACpCzB,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC;;EAED;EACA,MAAM2B,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC;MACA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACrB,YAAY,CAAC;MACtCqB,IAAI,CAACE,OAAO,CAACC,GAAG,IAAI;QAClB,IAAIA,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;UAC5BzB,YAAY,CAAC0B,UAAU,CAACF,GAAG,CAAC;QAC9B;MACF,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMG,cAAc,GAAIC,QAA0B,IAAK;IACrD9B,QAAQ,CAAC8B,QAAQ,CAAC;IAClB5B,YAAY,CAAC6B,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;;IAEvC;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;MACvBE,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC;;EAED;EACA3D,KAAK,CAAC4D,SAAS,CAAC,MAAM;IACpB,IAAItC,KAAK,KAAK,MAAM,EAAE;MACpBiC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACrC,KAAK,CAAC,CAAC;EAEX,MAAMuC,KAAqB,GAAG;IAC5B;IACAlD,OAAO;IACPkB,UAAU;IACVG,QAAQ;IACRC,UAAU;IACVE,aAAa;IAEb;IACAnB,cAAc;IACdC,iBAAiB;IAEjB;IACAC,QAAQ;IACRC,WAAW;IACXiB,aAAa;IACbK,aAAa;IAEb;IACArB,YAAY;IACZC,eAAe;IACfuB,UAAU;IAEV;IACAtB,KAAK;IACLC,QAAQ,EAAE6B,cAAc;IAExB;IACAzB,cAAc;IACdC;EACF,CAAC;EAED,oBACEvB,OAAA,CAACC,UAAU,CAACwD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAApD,QAAA,EAC/BA;EAAQ;IAAAsD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAACxD,EAAA,CA5IWF,WAAuC;AAAA2D,EAAA,GAAvC3D,WAAuC;AA8IpD,OAAO,MAAM4D,MAAM,GAAGA,CAAA,KAAsB;EAAAC,GAAA;EAC1C,MAAMC,OAAO,GAAGpE,UAAU,CAACI,UAAU,CAAC;EACtC,IAAIgE,OAAO,KAAK/D,SAAS,EAAE;IACzB,MAAM,IAAIgE,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,MAAM;AAQnB,eAAe9D,UAAU;AAAC,IAAA6D,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}