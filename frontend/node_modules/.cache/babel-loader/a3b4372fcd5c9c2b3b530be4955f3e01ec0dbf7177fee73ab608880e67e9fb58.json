{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n    this.api = axios.create({\n      baseURL: this.baseURL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor for adding auth token\n    this.api.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor for handling errors\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        this.clearToken();\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Token management\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n  setToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  clearToken() {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Auth endpoints\n  async login(credentials) {\n    const response = await this.api.post('/auth/login', credentials);\n    if (response.data.success && response.data.data) {\n      this.setToken(response.data.data.token);\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Login failed');\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register', userData);\n    if (response.data.success && response.data.data) {\n      this.setToken(response.data.data.token);\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Registration failed');\n  }\n  async logout() {\n    try {\n      await this.api.post('/auth/logout');\n    } finally {\n      this.clearToken();\n    }\n  }\n  async getProfile() {\n    const response = await this.api.get('/auth/profile');\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to get profile');\n  }\n\n  // Project endpoints\n  async getProjects(page = 1, limit = 10) {\n    const response = await this.api.get(`/projects?page=${page}&limit=${limit}`);\n    return response.data;\n  }\n  async getProject(id) {\n    const response = await this.api.get(`/projects/${id}`);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to get project');\n  }\n  async createProject(projectData) {\n    const response = await this.api.post('/projects', projectData);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to create project');\n  }\n  async updateProject(id, projectData) {\n    const response = await this.api.put(`/projects/${id}`, projectData);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to update project');\n  }\n  async deleteProject(id) {\n    const response = await this.api.delete(`/projects/${id}`);\n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Failed to delete project');\n    }\n  }\n\n  // Storyboard endpoints\n  async convertScript(conversionData) {\n    const response = await this.api.post(`/projects/${conversionData.projectId}/convert`, conversionData);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to convert script');\n  }\n  async getStoryboard(projectId) {\n    const response = await this.api.get(`/projects/${projectId}/storyboard`);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to get storyboard');\n  }\n  async updateStoryboard(projectId, storyboard) {\n    const response = await this.api.put(`/projects/${projectId}/storyboard`, {\n      storyboard\n    });\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to update storyboard');\n  }\n\n  // File upload endpoints\n  async uploadFile(file, projectId) {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (projectId) {\n      formData.append('projectId', projectId);\n    }\n    const response = await this.api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to upload file');\n  }\n\n  // Export endpoints\n  async exportProject(exportData) {\n    const response = await this.api.post(`/projects/${exportData.projectId}/export`, exportData);\n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    throw new Error(response.data.message || 'Failed to export project');\n  }\n\n  // Cache endpoints (for future Redis implementation)\n  async clearCache(projectId) {\n    const endpoint = projectId ? `/cache/project/${projectId}` : '/cache/clear';\n    const response = await this.api.delete(endpoint);\n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Failed to clear cache');\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await this.api.get('/health');\n    return response.data;\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","baseURL","process","env","REACT_APP_API_URL","create","timeout","headers","interceptors","request","use","config","token","getToken","Authorization","error","Promise","reject","response","_error$response","status","clearToken","window","location","href","localStorage","getItem","setToken","setItem","removeItem","login","credentials","post","data","success","Error","message","register","userData","logout","getProfile","get","getProjects","page","limit","getProject","id","createProject","projectData","updateProject","put","deleteProject","delete","convertScript","conversionData","projectId","getStoryboard","updateStoryboard","storyboard","uploadFile","file","formData","FormData","append","exportProject","exportData","clearCache","endpoint","healthCheck","apiService"],"sources":["/Users/harper/Desktop/scriptboard-project/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { \n  User, \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse,\n  Project,\n  CreateProjectRequest,\n  UpdateProjectRequest,\n  StoryboardScene,\n  ConversionRequest,\n  ConversionResponse,\n  ExportRequest,\n  ExportResponse,\n  ApiResponse,\n  PaginatedResponse\n} from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n  private baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: this.baseURL,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor for adding auth token\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = this.getToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor for handling errors\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          this.clearToken();\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Token management\n  private getToken(): string | null {\n    return localStorage.getItem('auth_token');\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('auth_token', token);\n  }\n\n  private clearToken(): void {\n    localStorage.removeItem('auth_token');\n  }\n\n  // Auth endpoints\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\n    const response: AxiosResponse<ApiResponse<AuthResponse>> = await this.api.post(\n      '/auth/login',\n      credentials\n    );\n    \n    if (response.data.success && response.data.data) {\n      this.setToken(response.data.data.token);\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Login failed');\n  }\n\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\n    const response: AxiosResponse<ApiResponse<AuthResponse>> = await this.api.post(\n      '/auth/register',\n      userData\n    );\n    \n    if (response.data.success && response.data.data) {\n      this.setToken(response.data.data.token);\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Registration failed');\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await this.api.post('/auth/logout');\n    } finally {\n      this.clearToken();\n    }\n  }\n\n  async getProfile(): Promise<User> {\n    const response: AxiosResponse<ApiResponse<User>> = await this.api.get('/auth/profile');\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to get profile');\n  }\n\n  // Project endpoints\n  async getProjects(page: number = 1, limit: number = 10): Promise<PaginatedResponse<Project>> {\n    const response: AxiosResponse<PaginatedResponse<Project>> = await this.api.get(\n      `/projects?page=${page}&limit=${limit}`\n    );\n    return response.data;\n  }\n\n  async getProject(id: string): Promise<Project> {\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.get(`/projects/${id}`);\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to get project');\n  }\n\n  async createProject(projectData: CreateProjectRequest): Promise<Project> {\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.post(\n      '/projects',\n      projectData\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to create project');\n  }\n\n  async updateProject(id: string, projectData: UpdateProjectRequest): Promise<Project> {\n    const response: AxiosResponse<ApiResponse<Project>> = await this.api.put(\n      `/projects/${id}`,\n      projectData\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to update project');\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    const response: AxiosResponse<ApiResponse<null>> = await this.api.delete(`/projects/${id}`);\n    \n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Failed to delete project');\n    }\n  }\n\n  // Storyboard endpoints\n  async convertScript(conversionData: ConversionRequest): Promise<ConversionResponse> {\n    const response: AxiosResponse<ApiResponse<ConversionResponse>> = await this.api.post(\n      `/projects/${conversionData.projectId}/convert`,\n      conversionData\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to convert script');\n  }\n\n  async getStoryboard(projectId: string): Promise<StoryboardScene[]> {\n    const response: AxiosResponse<ApiResponse<StoryboardScene[]>> = await this.api.get(\n      `/projects/${projectId}/storyboard`\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to get storyboard');\n  }\n\n  async updateStoryboard(projectId: string, storyboard: StoryboardScene[]): Promise<StoryboardScene[]> {\n    const response: AxiosResponse<ApiResponse<StoryboardScene[]>> = await this.api.put(\n      `/projects/${projectId}/storyboard`,\n      { storyboard }\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to update storyboard');\n  }\n\n  // File upload endpoints\n  async uploadFile(file: File, projectId?: string): Promise<{ url: string; filename: string }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (projectId) {\n      formData.append('projectId', projectId);\n    }\n\n    const response: AxiosResponse<ApiResponse<{ url: string; filename: string }>> = await this.api.post(\n      '/files/upload',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to upload file');\n  }\n\n  // Export endpoints\n  async exportProject(exportData: ExportRequest): Promise<ExportResponse> {\n    const response: AxiosResponse<ApiResponse<ExportResponse>> = await this.api.post(\n      `/projects/${exportData.projectId}/export`,\n      exportData\n    );\n    \n    if (response.data.success && response.data.data) {\n      return response.data.data;\n    }\n    \n    throw new Error(response.data.message || 'Failed to export project');\n  }\n\n  // Cache endpoints (for future Redis implementation)\n  async clearCache(projectId?: string): Promise<void> {\n    const endpoint = projectId ? `/cache/project/${projectId}` : '/cache/clear';\n    const response: AxiosResponse<ApiResponse<null>> = await this.api.delete(endpoint);\n    \n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Failed to clear cache');\n    }\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\n    const response: AxiosResponse<{ status: string; timestamp: string }> = await this.api.get('/health');\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}